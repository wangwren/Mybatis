<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
	namespace命名空间，为了对sql语句进行隔离，方便管理 ，mapper开发dao方式，使用namespace有特殊作用
	mapper代理开发时将namespace指定为mapper接口的全限定名(即接口的全类名)
 -->
<mapper namespace="vvr.mybatis.mapper.UserMapper">

<!-- 在mapper.xml文件中配置很多的sql语句，执行每个sql语句时，封装为MappedStatement对象
mapper.xml以statement为单位管理sql语句
 -->
 
 	<!-- 根据id查询用户信息 -->
	<!-- 
		id：唯一标识 一个statement
		#{}：表示 一个占位符，如果#{}中传入简单类型的参数，#{}中的名称随意
		parameterType：输入 参数的类型，通过#{}接收parameterType输入 的参数
		resultType：输出结果 类型，不管返回是多条还是单条，指定单条记录映射的pojo类型
		这里的resultType类型在SqlMapConfig.xml中指定了别名
	 -->
	<select id="findById" parameterType="int" resultType="user">
		select * from user where id = #{id}
	</select>
	
	<!-- 
		根据用户名称查询用户信息，可能返回多条
		${}：表示sql的拼接，通过${value}接收参数，将参数的内容不加任何修饰拼接在sql中。
		这种方式不能防止sql注入
	 -->
	<select id="findByName" parameterType="String" resultType="vvr.mybatis.pojo.User">
		select * from user where username like '%${value}%'
	</select>
	
	
	<!-- 用户添加 -->
	<!-- 
		添加时插入的数据参数有好多类型，包括username,birthday,sex,address，所以这里的参数类型可以是user对象
		接收的参数类型不是基本数据类型时，参数名称不能随意写
		#{}接收pojo数据，可以使用OGNL解析出pojo的属性值(当pojo中有其他对象时，也可以使用   对象名.属性名   指定)
		#{username}表示从parameterType中获取pojo的属性值
	 -->
	<insert id="insertUser" parameterType="vvr.mybatis.pojo.User">
	
		<!-- 
			selectKey：用于进行主键返回，定义了获取主键值的sql
			order：设置selectKey中sql执行的顺序，相对于insert语句来说，即自增情况下，在insert语句执行后查询出id值
				   两个参数：AFTER：insert语句之后，BEFORE：insert语句之前
			keyProperty：将主键值设置到哪个属性
			resultType：select LAST_INSERT_ID()的结果 类型
			select LAST_INSERT_ID()是mysql中查询主键返回用的函数
		 -->
		<selectKey keyProperty="id" order="AFTER" resultType="int">
			SELECT LAST_INSERT_ID()
		</selectKey>
		
		INSERT INTO USER(username,birthday,sex,address) VALUES(#{username},#{birthday},#{sex},#{address})
	</insert>
	
	
	<!-- mysql的uuid生成主键，即不是自增情况下，需要先生存uuid，在进行插入 -->
	<!-- <insert id="insertUser" parameterType="cn.itcast.mybatis.po.User">
		<selectKey keyProperty="id" order="BEFORE" resultType="string">
			select uuid()
		</selectKey>
		
		INSERT INTO USER(id,username,birthday,sex,address) VALUES(#{id},#{username},#{birthday},#{sex},#{address})
	</insert> -->
	
	<!-- oracle
	在执行insert之前执行select 序列.nextval() from dual取出序列最大值，将值设置到user对象 的id属性
	 -->
	<!-- <insert id="insertUser" parameterType="cn.itcast.mybatis.po.User">
		<selectKey keyProperty="id" order="BEFORE" resultType="int">
			select 序列.nextval() from dual
		</selectKey>
		
		INSERT INTO USER(id,username,birthday,sex,address) VALUES(#{id},#{username},#{birthday},#{sex},#{address})
	</insert> -->
	
	
	<!-- 用户删除 -->
	<delete id="deleteUser" parameterType="int">
		delete from user where id = #{id}
	</delete>
	
	<!-- 用户更新 -->
	<update id="updateUser" parameterType="vvr.mybatis.pojo.User">
		update user set username = #{username},birthday = #{birthday},sex = #{sex},address = #{address} where id = #{id}
	</update>
</mapper>